/**
 * This file's original source is from Matt Stevens: https://github.com/mattstevens/xcode-googletest/wiki
 */

#import <XCTest/XCTest.h>
#import <gtest/gtest.h>
#import "GoogleTestStub.h"

using testing::TestCase;
using testing::TestInfo;
using testing::TestResult;
using testing::TestPartResult;

/**
 * A Google Test printer that outputs test results in the XCTest format.
 *
 * Xcode's test result integration is based on parsing test output in this format.
 * Supporting this format also enables test result parsing in Xcode-aware continuous
 * integration systems.
 *
 * The output is generated by adding stub XCTests to XCTestSuiteRun and XCTestCaseRun
 * instances and using these classes to simulate XCTest behavior for the corresponding
 * Google Test actions. This ensures that output is produced in the expected format.
 */
class XCTestPrinter : public testing::EmptyTestEventListener {
public:
    XCTestPrinter(XCTestSuiteRun *run) :
        enclosingRun(run),
        testSuiteRun(nil),
        testRun(nil) {}

    void OnTestCaseStart(const TestCase& test_case) {
        NSString *name = [NSString stringWithUTF8String:test_case.name()];
        XCTest *testSuite = [GoogleTestStub testSuiteStubWithName:name testCaseCount:(NSUInteger)test_case.test_to_run_count()];
        testSuiteRun = [[XCTestSuiteRun alloc] initWithTest:testSuite];
        [testSuiteRun start];
    }

    void OnTestStart(const TestInfo& test_info) {
        NSString *suite = [[testSuiteRun test] name];
        NSString *name = [NSString stringWithUTF8String:test_info.name()];
        testRun = [[XCTestCaseRun alloc] initWithTest:[GoogleTestStub testCaseStubWithName:name suite:suite]];
        [testRun start];
    }

    void OnTestPartResult(const TestPartResult& test_part_result) {
        if (test_part_result.passed())
            return;

        NSString *path = [[NSString stringWithUTF8String:test_part_result.file_name()] stringByStandardizingPath];
        NSString *description = [NSString stringWithUTF8String:test_part_result.message()];
        [testRun recordFailureInTest:(XCTestCase *)[testRun test] withDescription:description inFile:path atLine:test_part_result.line_number() expected:YES];
    }

    void OnTestEnd(const TestInfo& test_info) {
        [testSuiteRun addTestRun:testRun];
        [testRun stop];
        testRun = nil;
    }

    void OnTestCaseEnd(const TestCase& test_case) {
        [enclosingRun addTestRun:testSuiteRun];
        [testSuiteRun stop];
        testSuiteRun = nil;
    }

private:
    XCTestSuiteRun *enclosingRun;
    XCTestSuiteRun *testSuiteRun;
    XCTestCaseRun *testRun;
};

@interface GoogleTests : XCTestCase
@end

/**
 * A test case that executes Google Test, outputting test results in the XCTest format.
 *
 * XCTest loads tests by looking for all classes derived from XCTestCase and calling
 * +defaultTestSuite on each of them. Normally this method returns an XCTestSuite
 * containing an XCTestCase for each method of the receiver whose name begins with "test".
 * Instead this class acts as its own test suite and runs Google Test when performTest: is
 * called.
 */
@implementation GoogleTests

+ (id)defaultTestSuite {
    return [[self alloc] init];
}

- (Class)testRunClass {
    return [XCTestSuiteRun class];
}

- (NSString *)name {
    return NSStringFromClass([self class]);
}

- (NSUInteger)testCaseCount {
    return (NSUInteger)testing::UnitTest::GetInstance()->test_to_run_count();
}

- (void)performTest:(XCTestRun *)testRun {
    // Pass the command-line arguments to Google Test to support the --gtest options
    NSArray *arguments = [[NSProcessInfo processInfo] arguments];

    int i = 0;
    int argc = (int)[arguments count];
    const char **argv = (const char **)calloc((unsigned int)argc + 1, sizeof(const char *));
    for (NSString *arg in arguments) {
        argv[i++] = [arg UTF8String];
    }

    testing::InitGoogleTest(&argc, (char **)argv);
    testing::TestEventListeners& listeners = testing::UnitTest::GetInstance()->listeners();
    delete listeners.Release(listeners.default_result_printer());
    listeners.Append(new XCTestPrinter((XCTestSuiteRun *)testRun));
    free(argv);

    #pragma clang diagnostic push
    #pragma clang diagnostic ignored "-Wunused-result"
    RUN_ALL_TESTS();
    #pragma clang diagnostic pop
}

@end
